# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_note_dialog.py'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
"""
add note dialog class
"""
import os
import sys
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QSizePolicy
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QWidget
from PyQt5.QtWidgets import QFrame
from PyQt5.QtWidgets import QFormLayout
from PyQt5.QtWidgets import QHBoxLayout
from PyQt5.QtWidgets import QGridLayout
from PyQt5.QtWidgets import QLabel
from PyQt5.QtWidgets import QLineEdit
from PyQt5.QtWidgets import QTextEdit
from PyQt5.QtWidgets import QPushButton
from PyQt5.QtWidgets import QTextBrowser
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtGui import QTextCursor
from PyQt5.QtGui import QFont
from PyQt5.QtCore import QSize
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QUrl
from PyQt5.QtCore import QMetaObject
from PyQt5.QtCore import QCoreApplication
from signal_manager import SignalManager
from config import MAX_SIZE_NUM
from com_manager.note_dialog_common import NOTE_DIALOG_SIZE
from com_manager.note_dialog_common import TITLE_FRAME_MIN_SIZE
from com_manager.note_dialog_common import TITLE_NAME_LABEL_MAX_WIDTH
from com_manager.note_dialog_common import TITLE_EDIT_MIN_SIZE
from com_manager.note_dialog_common import TITLE_FRAME_MIN_HEIGHT
from com_manager.note_dialog_common import CONTENT_FRAME
from com_manager.note_dialog_common import BUTTON_FRAME
from com_manager.note_dialog_common import BTN_MAX_WIDTH
from com_manager.note_dialog_common import ADD_NOTE_DIALOG_FONT
from com_manager.note_dialog_common import ADD_NOTE_DIALOG_WEIGHT
from com_manager.note_dialog_common import ADD_NOTE_DIALOG_FAMILY
from com_manager.note_dialog_common import MAX_TITLE_INPUT_LEN
from com_manager.note_dialog_common import TITLE_EDIT_MAX_SIZE
from dialogGroups.base_dialog import BaseDialog
from com_manager.md_to_html import MdToHtml


class AddNoteDialog(BaseDialog):
    """
    add note dialog setting
    """

    def __init__(self, chapter_set):
        super().__init__()
        self.setObjectName("add_note_dialog")
        self.resize(*NOTE_DIALOG_SIZE)
        self.setFixedSize(self.width(), self.height())
        self.central_widget = QWidget(self)
        self.central_widget.setObjectName("central_widget")

        self.font = QFont()

        self.grid_layout = QGridLayout(self.central_widget)
        self.grid_layout.setObjectName("gird_layout")

        self.title_frame = QFrame(self.central_widget)
        self.content_frame = QFrame(self.central_widget)
        self.btn_frame = QFrame(self.central_widget)

        self.from_layout = QFormLayout(self.title_frame)

        self.horizontal_layout = QHBoxLayout(self.content_frame)
        self.horizontal_layout.setContentsMargins(0, 0, 0, 0)

        self.btn_layout = QHBoxLayout(self.btn_frame)

        self.title_name_label = QLabel(self.title_frame)

        self.title_line_edit = QLineEdit(self.title_frame)

        self.note_content_label = QLabel(self.content_frame)

        self.note_text_edit = QTextEdit(self.content_frame)

        self.preview_label = QLabel(self.content_frame)

        self.preview_note = QWebEngineView(self.content_frame)

        self.save_note_btn = QPushButton(self)

        self.cancel_note_btn = QPushButton(self)

        self.send = SignalManager()
        self.chapter_set = chapter_set

        self.md_to_html = MdToHtml()

    def show_dialog(self, theme_name):
        """
        show dialog
        :param theme_name: theme name
        :return:
        """
        if theme_name:
            self.show()
        else:
            msg_box = QMessageBox(QMessageBox.Warning, "警告", "主题不存在，请先创建")
            msg_box.exec_()

    def _init_font(self):
        self.font.setFamily(ADD_NOTE_DIALOG_FAMILY)
        self.font.setPointSize(ADD_NOTE_DIALOG_FONT)
        self.font.setBold(True)
        self.font.setWeight(ADD_NOTE_DIALOG_WEIGHT)

    def _init_title_frame(self):
        self.title_frame.setObjectName("title_frame")
        self.title_frame.setMinimumSize(QSize(*TITLE_FRAME_MIN_SIZE))
        self.title_frame.setMaximumSize(
            QSize(MAX_SIZE_NUM, TITLE_FRAME_MIN_HEIGHT))
        self.title_frame.setLayoutDirection(Qt.LeftToRight)
        self.title_frame.setFrameShape(QFrame.StyledPanel)
        self.title_frame.setFrameShadow(QFrame.Raised)

    def _init_content_frame(self):
        self.content_frame.setObjectName("content_frame")
        self.content_frame.setMinimumSize(QSize(*CONTENT_FRAME))
        self.content_frame.setFrameShape(QFrame.StyledPanel)
        self.content_frame.setFrameShadow(QFrame.Raised)

    def _init_btn_frame(self):
        self.btn_frame.setObjectName("btn_frame")
        self.btn_frame.setMinimumSize(QSize(*BUTTON_FRAME))
        self.btn_frame.setFrameShape(QFrame.StyledPanel)
        self.btn_frame.setFrameShadow(QFrame.Raised)

    def _init_frame_layout(self):
        self.grid_layout.addWidget(self.title_frame, 0, 0, 1, 1)
        self.grid_layout.addWidget(self.content_frame, 1, 0, 1, 1)
        self.grid_layout.addWidget(self.btn_frame, 2, 0, 1, 1)

    def _init_title_layout(self):
        self.from_layout.setObjectName("from_layout")
        self.from_layout.setContentsMargins(9, -1, -1, -1)
        self.from_layout.setWidget(
            0, QFormLayout.LabelRole, self.title_name_label)
        self.from_layout.setWidget(
            0, QFormLayout.FieldRole, self.title_line_edit)

    def _init_content_layout(self):
        self.horizontal_layout.setObjectName("horizontal_layout")
        self.horizontal_layout.addWidget(
            self.note_content_label, 0, Qt.AlignTop)
        self.horizontal_layout.addWidget(self.note_text_edit)
        self.horizontal_layout.addWidget(
            self.preview_label, 0, Qt.AlignTop)
        self.horizontal_layout.addWidget(self.preview_note)

    def _init_btn_layout(self):
        self.btn_layout.setObjectName("btn_layout")
        self.btn_layout.addWidget(self.save_note_btn)
        self.btn_layout.addWidget(self.cancel_note_btn)

    def _init_title_name_label(self):
        self.title_name_label.setObjectName("title_name_label")
        self.title_name_label.setMaximumSize(
            QSize(TITLE_NAME_LABEL_MAX_WIDTH, MAX_SIZE_NUM))
        self.title_name_label.setFont(self.font)

    def _init_title_edit(self):
        self.title_line_edit.setObjectName("title_line_edit")
        self.title_line_edit.setMinimumSize(QSize(*TITLE_EDIT_MIN_SIZE))
        self.title_line_edit.setMaximumSize(QSize(*TITLE_EDIT_MAX_SIZE))
        self.title_line_edit.setAlignment(
            Qt.AlignLeading |
            Qt.AlignLeft |
            Qt.AlignVCenter
        )

    def _init_note_content_label(self):
        self.note_content_label.setObjectName("note_content_label")
        self.note_content_label.setFont(self.font)
        self.note_content_label.setMaximumSize(QSize(60, MAX_SIZE_NUM))

    def _init_note_content_edit(self):
        self.note_text_edit.setObjectName("note_text_edit")
        self.note_text_edit.setHorizontalScrollBarPolicy(
            Qt.ScrollBarAsNeeded)
        self.note_text_edit.setLineWrapMode(QTextEdit.NoWrap)
        self.note_text_edit.setMaximumSize(500, MAX_SIZE_NUM)
        self.note_text_edit.textChanged.connect(self.fresh_text_edit)

    def _init_preview_note_label(self):
        """
        init preview note label state
        :return:
        """
        self.preview_label.setObjectName("preview_label")
        self.preview_label.setFont(self.font)
        self.preview_label.setMaximumSize(QSize(60, MAX_SIZE_NUM))

    def _init_preview_note(self):
        """
        init preview note state
        :return:
        """
        self.preview_note.setObjectName("preview_note")
        size_policy = QSizePolicy(
            QSizePolicy.Preferred, QSizePolicy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(
            self.preview_note.sizePolicy().hasHeightForWidth())
        self.preview_note.setSizePolicy(size_policy)
        self.preview_note.setMinimumSize(QSize(500, MAX_SIZE_NUM))
        # with open("../src/html_src/textMagicEdit.html", "r", encoding="utf-8") as f:
        #     self.preview_note.setHtml(f.read())
        #     # 加载本地html文件
        #     url = os.getcwd() + os.path.sep + "../src/html_src/textMagicEdit.html"
        #     self.preview_note.load(QUrl.fromLocalFile(url))
        # 设置水平滚动条
        # self.preview_note.setHorizontalScrollBarPolicy(
        #     Qt.ScrollBarAsNeeded)
        # self.preview_note.setLineWrapMode(QTextEdit.NoWrap)
        # self.preview_note.verticalScrollBar().setValue(
        #     self.preview_note.verticalScrollBar().maximum())
        # self.preview_note.moveCursor(QTextCursor.End)

    def _save_btn(self):
        """
        set save button state
        :return:
        """
        self.save_note_btn.setObjectName("save_note_btn")
        self.save_note_btn.setMaximumSize(QSize(BTN_MAX_WIDTH, MAX_SIZE_NUM))
        self.save_note_btn.clicked.connect(self.save_title_content)
        self.save_note_btn.setFont(self.font)

    def _cancel_btn(self):
        """
        set cancel button state
        :return:
        """
        self.cancel_note_btn.setObjectName("cancel_note_btn")
        self.cancel_note_btn.setMaximumSize(QSize(BTN_MAX_WIDTH, MAX_SIZE_NUM))
        self.cancel_note_btn.clicked.connect(self.close_dialog)
        self.cancel_note_btn.setFont(self.font)

    def setup_ui(self):
        """
        init ui setting
        :return:
        """
        self._init_font()
        self._init_title_frame()
        self._init_content_frame()
        self._init_btn_frame()
        self._init_frame_layout()
        self._init_title_layout()
        self._init_content_layout()
        self._init_btn_layout()
        self._init_title_name_label()
        self._init_title_edit()
        self._init_note_content_label()
        self._init_note_content_edit()
        self._init_preview_note_label()
        self._init_preview_note()
        self._save_btn()
        self._cancel_btn()
        self.re_translate_ui()
        self.setCentralWidget(self.central_widget)
        QMetaObject.connectSlotsByName(self)

    def re_translate_ui(self):
        """
        re translate ui
        :return:
        """
        _translate = QCoreApplication.translate
        self.setWindowTitle(_translate("add_note_dialog", "Dialog"))
        self.title_name_label.setText(_translate("add_note_dialog", "标题名："))
        self.note_content_label.setText(_translate("add_note_dialog", "内容："))
        self.preview_label.setText(_translate("add_note_dialog", "预览："))
        self.save_note_btn.setText(_translate("add_note_dialog", "保存"))
        self.cancel_note_btn.setText(_translate("add_note_dialog", "取消"))

    def save_title_content(self):
        """
        get title and note text save content to db
        :return:
        """
        title_name = self.title_line_edit.text()
        content_txt = self.note_text_edit.toPlainText()
        if title_name in self.chapter_set:
            msg_box = QMessageBox(QMessageBox.Warning, "警告", "标题已存在请重新输入")
            msg_box.exec_()
        elif len(title_name) > MAX_TITLE_INPUT_LEN:
            msg_box = QMessageBox(QMessageBox.Warning, "警告", "标题长度不能大于20个字符")
            msg_box.exec_()
        elif title_name and content_txt:
            self.send.send_signal((self.title_line_edit.text(), content_txt))
            self.title_line_edit.clear()
            self.note_text_edit.clear()
            self.close()
        else:
            msg_box = QMessageBox(QMessageBox.Warning, "警告", "文章标题和内容不能为空")
            msg_box.exec_()

    def fresh_text_edit(self):
        """
        input and fresh preview text
        :return:
        """
        # print(self.note_text_edit.toPlainText())
        new_html = self.md_to_html.refresh_line(self.note_text_edit.toPlainText())
        print(new_html)
        url = os.getcwd() + os.path.sep + "../src/html_tmp_file/tmp_html.html"
        self.preview_note.setHtml(new_html)
        # with open(url, "w", encoding="utf-8") as f:
        #     f.write(new_html)
        #     self.preview_note.load(QUrl.)
        # self.preview_note.setHtml(new_html)
        # self.preview_note.setText(self.note_text_edit.toPlainText())
        # self.preview_note.setMarkdown(self.preview_note.toPlainText())
        # # 保证预览界面与输入界面同步
        # self.preview_note.verticalScrollBar().setValue(
        #     self.preview_note.verticalScrollBar().maximum())
        # self.preview_note.moveCursor(QTextCursor.End)


if __name__ == '__main__':

    app = QApplication(sys.argv)
    add_dialog = AddNoteDialog(set())
    add_dialog.setup_ui()
    add_dialog.show()
    sys.exit(app.exec())
